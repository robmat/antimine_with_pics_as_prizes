apply plugin: 'com.android.application'

if (System.getenv('IS_RELEASE_BUILD')) {
    apply plugin: 'com.google.gms.google-services'
}

apply plugin: 'kotlin-android'
apply plugin: 'com.google.devtools.ksp'

def versionCodeNum = 24

android {
    namespace 'com.batodev.antimine'

    defaultConfig {
        // versionCode and versionName must be hardcoded to support F-droid
        versionCode versionCodeNum
        versionName '1.24'
        minSdk 23
        targetSdk 36
        compileSdk = 36
        multiDexEnabled true
        vectorDrawables.useSupportLibrary true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    Properties localProperties = new Properties()
    localProperties.load(new FileReader(file('../local.properties')))
    signingConfigs {
        release {
                storeFile file(localProperties.get('storeFile'))
                keyAlias localProperties.get('keyAlias')
                storePassword localProperties.get('storePassword')
                keyPassword localProperties.get('keyPassword')
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    buildFeatures {
        buildConfig true
        viewBinding true
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_17
        sourceCompatibility JavaVersion.VERSION_17
    }

    kotlin {
        jvmToolchain(17)
    }

    testOptions {
        unitTests {
            includeAndroidResources true
            animationsDisabled true
        }
    }

    flavorDimensions = ['version']
    productFlavors {
        google {
            dimension 'version'
            applicationId 'com.batodev.antimine'
            versionNameSuffix " S"
        }

        googleInstant {
            versionCode versionCodeNum
            dimension 'version'
            applicationId 'com.batodev.antimine'
            versionNameSuffix " I"
        }

        foss {
            dimension 'version'
            // There's a typo on F-Droid release :(
            applicationId 'com.batodev.antimine'
            versionNameSuffix " F"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':external')
    implementation project(':common')
    implementation project(':control')
    implementation project(':about')
    implementation project(':ui')
    implementation project(':preferences')
    implementation project(':themes')
    implementation project(':tutorial')
    implementation project(':core')
    implementation project(':gdx')

    googleImplementation project(':proprietary')
    googleInstantImplementation project(':proprietary')
    googleInstantImplementation project(':instant')
    fossImplementation project(':foss')
    fossImplementation project(':donation')

    googleImplementation project(':audio')
    fossImplementation project(':audio')
    googleInstantImplementation project(':audio-low')

    // AndroidX
    implementation libs.androidx.appcompat
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.recyclerview
    implementation libs.androidx.multidex
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.fragment.ktx

    // Lifecycle
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.common.java8

    // Room
    implementation libs.androidx.room.ktx

    // Constraint
    implementation libs.androidx.constraintlayout

    // Google
    implementation libs.google.material

    // Koin
    implementation libs.koin.android
    testImplementation libs.koin.test

    // Kotlin
    implementation libs.kotlinx.coroutines.android
    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.metadata.jvm
    testImplementation libs.kotlinx.coroutines.test

    // Konfetti
    implementation libs.konfetti.xml

    // Photo view
    implementation libs.photo.view

    // Tests
    testImplementation libs.junit
    testImplementation libs.androidx.core.ktx
    testImplementation libs.androidx.test.core.ktx
    testImplementation libs.androidx.test.rules
    testImplementation libs.androidx.test.runner
    testImplementation libs.androidx.test.espresso.core
    testImplementation libs.androidx.fragment.testing
    testImplementation libs.robolectric
    testImplementation libs.androidx.test.ext.junit
    testImplementation libs.mockk

    // Core library
    androidTestImplementation libs.androidx.test.core

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation libs.androidx.test.core
    androidTestImplementation libs.androidx.test.core.ktx
    androidTestImplementation libs.androidx.test.espresso.core
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.rules
    androidTestUtil libs.androidx.test.orchestrator
}

tasks.withType(Test).configureEach {
    testLogging {
        exceptionFormat 'full'
    }
    afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

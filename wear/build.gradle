plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
}

android {
    namespace 'dev.lucasnlm.antimine.wear'

    defaultConfig {
        // versionCode and versionName must be hardcoded to support F-droid
        applicationId 'com.batodev.antimine'
        versionCode 1702040
        versionName '17.2.4 W'
        minSdk 25
        targetSdk 36
        compileSdk = 36
        multiDexEnabled true
        vectorDrawables.useSupportLibrary true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    signingConfigs {
        release {
            if (System.getenv('IS_RELEASE_BUILD')) {
                storeFile file(System.getenv('KEYSTORE'))
                keyAlias System.getenv('KEY_ALIAS')
                storePassword System.getenv('KEY_STORE_PASSWORD')
                keyPassword System.getenv('KEY_PASSWORD')
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    kotlin {
        jvmToolchain(17)
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_17
        sourceCompatibility JavaVersion.VERSION_17
    }

    testOptions {
        unitTests {
            includeAndroidResources true
            animationsDisabled true
        }
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':external')
    implementation project(':common')
    implementation project(':control')
    implementation project(':ui')
    implementation project(':preferences')
    implementation project(':core')
    implementation project(':gdx')
    implementation project(':foss')

    // Wear OS
    implementation libs.androidx.wear

    // AndroidX
    implementation libs.androidx.appcompat
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.recyclerview
    implementation libs.androidx.multidex
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.fragment.ktx

    // Lifecycle
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.common.java8

    // Room
    implementation libs.androidx.room.ktx

    // Constraint
    implementation libs.androidx.constraintlayout

    // Google
    implementation libs.google.material

    // Koin
    implementation libs.koin.android
    testImplementation libs.koin.test

    // Kotlin
    implementation libs.kotlinx.coroutines.android
    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.metadata.jvm
    testImplementation libs.kotlinx.coroutines.test

    // Tests
    testImplementation libs.junit
    testImplementation libs.androidx.core.ktx
    testImplementation libs.androidx.test.core.ktx
    testImplementation libs.androidx.test.rules
    testImplementation libs.androidx.test.runner
    testImplementation libs.androidx.test.espresso.core
    testImplementation libs.androidx.fragment.testing
    testImplementation libs.robolectric
    testImplementation libs.androidx.test.ext.junit
    testImplementation libs.mockk

    // Core library
    androidTestImplementation libs.androidx.test.core

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation libs.androidx.test.core
    androidTestImplementation libs.androidx.test.core.ktx
    androidTestImplementation libs.androidx.test.espresso.core
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.rules
    androidTestUtil libs.androidx.test.orchestrator
}

tasks.withType(Test).configureEach {
    testLogging {
        exceptionFormat 'full'
    }
    afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
